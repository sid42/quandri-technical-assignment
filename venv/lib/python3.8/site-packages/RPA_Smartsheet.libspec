<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.Smartsheet" type="LIBRARY" format="REST" scope="GLOBAL" generated="2023-05-05T11:54:26Z" specversion="4" source="./RPA/Smartsheet.py" lineno="74">
<version/>
<doc>*Smartsheet* is a library for accessing Smartsheet using the
`Smartsheet API 2.0`_. It extends `smartsheet-python-sdk`_.

.. _Smartsheet API 2.0: https://smartsheet.redoc.ly/
.. _smartsheet-python-sdk: https://github.com/smartsheet/smartsheet-python-sdk

Getting started
===============

To use this library, you need to have a Smartsheet account and an API token.
You can get your API token from the `Smartsheet Developer Portal`_.
This library currently only supports raw token authentication. Once
obtained, you can configure the access token using the ``Set Access Token``
keyword or via the ``access_token`` argument in the library import.

.. _Smartsheet Developer Portal: https://smartsheet-platform.github.io/api-docs/

Working on a sheet
==================

The library supports working on a single sheet at a time. To select a sheet
to work on, use the ``Select Sheet`` keyword. This will set the sheet as
the active sheet for all subsequent operations. Some operations
update the sheet, but this will not necessarily be reflected in the active
sheet. To refresh the active sheet, use the ``Refresh Sheet`` keyword.

Native Smartsheet objects
=========================

You can retrieve the native Smartsheet object from many keywords by
specifying the ``native`` argument. The default will return a more
common Python object, such as a dictionary or list. The native object
is a class from the `smartsheet-python-sdk`_ library and will have
additional methods and attributes. The most important attributes
available for most native objects are (some may be unavailable
for some objects):

- ``id``: the unique identifier of the object
- ``name``: the name of the object
- ``title``: the title of a column
- ``permalink``: the URL to the object</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="169">
<arguments repr="access_token: str | None = None, max_retry_time: str | int = 30">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="access_token: str | None = None">
<name>access_token</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="max_retry_time: str | int = 30">
<name>max_retry_time</name>
<type typedoc="string">str</type>
<type typedoc="integer">int</type>
<default>30</default>
</arg>
</arguments>
<doc>If you do not initialize the library with an access token,
it will attempt to load the environment variable
``SMARTSHEET_ACCESS_TOKEN``, otherwise, use the keyword
``Set access token``.

:param access_token: The access token created for your
 Smartsheet user.
:param max_retry_time: Maximum time to allow retries of API
 calls. Can be provided as a time string or int.</doc>
<shortdoc>If you do not initialize the library with an access token, it will attempt to load the environment variable ``SMARTSHEET_ACCESS_TOKEN``, otherwise, use the keyword ``Set access token``.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Add Column" lineno="839">
<arguments repr="title: str, column_type: str = TEXT_NUMBER, formula: str | None = None, hidden: bool = False, index: int | None = None, description: str | None = None, primary: bool = False, format_string: str | None = None, locked: bool = False, options: List[str] | None = None, symbol: str | None = None, validation: bool = False, width: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="title: str">
<name>title</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="column_type: str = TEXT_NUMBER">
<name>column_type</name>
<type typedoc="string">str</type>
<default>TEXT_NUMBER</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="formula: str | None = None">
<name>formula</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="hidden: bool = False">
<name>hidden</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index: int | None = None">
<name>index</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="description: str | None = None">
<name>description</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="primary: bool = False">
<name>primary</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="format_string: str | None = None">
<name>format_string</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locked: bool = False">
<name>locked</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="options: List[str] | None = None">
<name>options</name>
<type typedoc="list">List[str]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="symbol: str | None = None">
<name>symbol</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="validation: bool = False">
<name>validation</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="width: int | None = None">
<name>width</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Adds a column to the current sheet.

:param title: Column title.
:param column_type: Column type, must be a `supported type`_.
 Defaults to ``TEXT_NUMBER``.
:param formula: Formula for the column (e.g., ``=data@row``).
 Defaults to ``None``.
:param hidden: Whether the column is hidden. Defaults to ``False``.
:param index: Index of the column. You can insert a column into
 and existing sheet by setting this index. Index is zero-based.
 Defaults to ``None`` which will add the column to the end of
 the sheet.
:param description: Column description. Defaults to ``None``.
:param primary: Whether the column is considered the primary
 key for indexing and searching. Defaults to ``False``.
:param format_string: Column format using a `format descriptor`_
 string. Defaults to ``None``.
:param locked: Whether the column is locked. Defaults to ``False``.
:param options: List of options for a ``PICKLIST`` or
 ``MULTI_PICKLIST`` column. Defaults to ``None``.
:param symbol: When a ``CHECKBOX`` or ``PICKLIST`` column has a
 display symbol, you can set the type of symbols by selected an
 appropriate string from the `symbol columns`_ definitions.
 Defaults to ``None``.
:param validation: Whether validation has been enabled. Defaults
 to ``False``.
:param width: Column width in pixels. Defaults to ``None``.

.. _symbol columns: https://smartsheet.redoc.ly/tag/columnsRelated/#section/Column-Types/Symbol-Columns
.. _format descriptor: https://smartsheet.redoc.ly/#section/API-Basics/Formatting
.. _supported type: https://smartsheet.redoc.ly/tag/columnsRelated/#section/Column-Types

Example:

.. code-block:: robotframework

    Add Column  Title  TEXT_NUMBER
    Add Column  Description  TEXT_NUMBER  description=This is a description
    Add Column  Formula  TEXT_NUMBER  formula==data@row

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    ss.add_column(title="Title", column_type="TEXT_NUMBER")
    ss.add_column(title="Description", column_type="TEXT_NUMBER", description="This is a description")
    ss.add_column(title="Formula", column_type="TEXT_NUMBER", formula="=data@row")</doc>
<shortdoc>Adds a column to the current sheet.</shortdoc>
</kw>
<kw name="Add Columns" lineno="815">
<arguments repr="columns: List[Dict | Column] | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="columns: List[Dict | Column] | None = None">
<name>columns</name>
<type typedoc="list">List[Dict | Column]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Adds columns to the current sheet. Columns must be defined as
a list of dictionaries or Column objects. Dictionaries can have
additional keys set, see ``Add Column`` keyword for more information.

Column types must be supported by the `Smartsheet API`_

.. _Smartsheet API: https://smartsheet.redoc.ly/tag/columnsRelated#section/Column-Types

:param columns: Columns as a list of dictionaries or Column
 objects.</doc>
<shortdoc>Adds columns to the current sheet. Columns must be defined as a list of dictionaries or Column objects. Dictionaries can have additional keys set, see ``Add Column`` keyword for more information.</shortdoc>
</kw>
<kw name="Add Rows" lineno="1178">
<arguments repr="data: List | Table, native: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="data: List | Table">
<name>data</name>
<type typedoc="list">List</type>
<type>Table</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="native: bool = False">
<name>native</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Adds rows to the current sheet with the provided data.

You can provide the data in several ways:

* As a list of dictionaries: each list item represents a row
  as a single dictionary. The keys of the dictionary are the
  column IDs or Titles and the values are the values for the
  cells.
* As a list of lists of dictionaries: each sub list item is
  a row and each dictionary is a cell. The keys of the dictionary
  should match cell attributes, e.g., ``column_id``, ``title``,
  ``value``, etc. See the `smartsheet API docs`_ for more
  information. The dictionary keys must be provided in snake
  case. You must use this method to set formulas on the row.
* As a list of native ``Row`` objects: each ``Row`` object is a
  native object from the API with new values for the cells.
* As a ``Table`` object: the columns of the Table must either
  be the column IDs or Titles.

.. _smartsheet API docs: https://smartsheet.redoc.ly/tag/rows#operation/add-rows

Examples:

*Robot Framework:*

.. code-block:: robotframework

    ${row1}=  Create Dictionary  column1=value1  column2=value2
    ${row2}=  Create Dictionary  column1=value3  column2=value4
    ${row3}=  Create Dictionary  column1=value5  column2=value6
    ${data} =  Create List  ${row1}  ${row2}  ${row3}
    Add Rows  ${data}

*Python:*

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    row1 = {"column1": "value1", "column2": "value2"}
    row2 = {"column1": "value3", "column2": "value4"}
    row3 = {"column1": "value5", "column2": "value6"}
    data = [row1, row2, row3]
    ss.set_rows(data)</doc>
<shortdoc>Adds rows to the current sheet with the provided data.</shortdoc>
</kw>
<kw name="Convert Row To Dict" lineno="1015">
<arguments repr="row: Row">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: Row">
<name>row</name>
<type>Row</type>
</arg>
</arguments>
<doc>Converts a row object to a dictionary.</doc>
<shortdoc>Converts a row object to a dictionary.</shortdoc>
</kw>
<kw name="Convert Sheet To Table" lineno="510">
<arguments repr="sheet: Sheet | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheet: Sheet | None = None">
<name>sheet</name>
<type>Sheet</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Converts the current sheet to table. You can provide a differnt
native sheet object to be converted via the ``sheet`` parameter.

This keyword attempts to return the sheet as a table via
``RPA.Tables``, but if that library is not available in this
context, the sheet is returned as its native data model (e.g.,
no operation is performed).

If the sheet contains additional data from the ``include``
argument, they will be appended to the end of the table as
additional columns in the data model. These additional objects
will be attached as a list of objects depending on the items
requested.

.. warn:

    Only the following supported additional data requests
    are supported when unpacking a Sheet object.

    * ``attachments``: The value for the cell will be a list of
    native Attachment object.
    * ``attachmentFiles``: The value for the cell will be a list of
    file paths to the local copies of each attachment. This
    operation may be resource intensive for many attachments.
    * ``discussions``: The value for the cell will be a list of
    native Discussion objects.
    * ``rowPermalink``: The value for the cell will be a single
    string representing the URL to the permalink.</doc>
<shortdoc>Converts the current sheet to table. You can provide a differnt native sheet object to be converted via the ``sheet`` parameter.</shortdoc>
</kw>
<kw name="Create Sheet" lineno="639">
<arguments repr="name: str, columns: List[Dict | Column] | None = None, from_sheet_id: int | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name: str">
<name>name</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="columns: List[Dict | Column] | None = None">
<name>columns</name>
<type typedoc="list">List[Dict | Column]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="from_sheet_id: int | str | None = None">
<name>from_sheet_id</name>
<type typedoc="integer">int</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Creates a new sheet with the given name and columns, then sets
the current sheet to the new sheet and returns it as a native
Smartsheet object.

:param name: Name of the new sheet.
:param columns: List of columns to create in the new sheet.
:param from_sheet_id: Sheet ID to use as a template for the new
 sheet.

Example:

.. code-block:: robotframework

    ${columns}=  Create List  Name  Email
    ${sheet}=  Create Sheet  My new sheet  ${columns}

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    columns = [
        {"title": "Name", "type": "TEXT_NUMBER"},
        {"title": "Email", "type": "TEXT_NUMBER"},
    ]
    sheet = ss.create_sheet("My new sheet", columns)</doc>
<shortdoc>Creates a new sheet with the given name and columns, then sets the current sheet to the new sheet and returns it as a native Smartsheet object.</shortdoc>
</kw>
<kw name="Download Attachment" lineno="1377">
<arguments repr="attachment: int | str | Dict | Attachment, download_path: Path | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attachment: int | str | Dict | Attachment">
<name>attachment</name>
<type typedoc="integer">int</type>
<type typedoc="string">str</type>
<type typedoc="dictionary">Dict</type>
<type>Attachment</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="download_path: Path | str | None = None">
<name>download_path</name>
<type>Path</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Downloads the provided attachment from the currently selected
sheet to the provided download_path, which defaults to
the ``${OUTPUT_DIR}``.

The attachment can be provided as an integer representing the
attachments ID, a dictionary with at least the key ``id`` or as
the native ``Attachment`` data model type.

:param attachment: An integar representing the attachment ID, a
 dictionary with at least the key ``id``, or a native
 ``Attachment`` data model object.
:param download_path: The path to save the attachment to.

Examples:

*Robot Framework:*

.. code-block:: robotframework

    ${attachment}=  Get Attachment  123456789
    ${path}=  Download Attachment  ${attachment}
    Log  ${path}

*Python:*

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    attachment = ss.get_attachment(123456789)
    path = ss.download_attachment(attachment)
    print(path)</doc>
<shortdoc>Downloads the provided attachment from the currently selected sheet to the provided download_path, which defaults to the ``${OUTPUT_DIR}``.</shortdoc>
</kw>
<kw name="Get Application Constants" lineno="335">
<arguments repr="">
</arguments>
<doc>Gets application constants from the server. This is not
necessary for most automation scenarios, but may be useful for
debugging or for other advanced scenarios.</doc>
<shortdoc>Gets application constants from the server. This is not necessary for most automation scenarios, but may be useful for debugging or for other advanced scenarios.</shortdoc>
</kw>
<kw name="Get Cell History" lineno="1258">
<arguments repr="row: int | Row, column: int | str | Column">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int | Row">
<name>row</name>
<type typedoc="integer">int</type>
<type>Row</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int | str | Column">
<name>column</name>
<type typedoc="integer">int</type>
<type typedoc="string">str</type>
<type>Column</type>
</arg>
</arguments>
<doc>Retrieves the history of a cell in a row of the current sheet.

:param row: The row ID, row number, or a Row object.
:param column: The column ID or title.

Examples:

*Robot Framework:*

.. code-block:: robotframework

    ${cell_history}=  Get Cell History  1  Approval
    FOR  ${revision} IN  @{cell_history}
        Log  Modified by ${revision.modified_by.email}
    END

*Python:*

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    cell_history = ss.get_cell_history(1, "Approval")
    for revision in cell_history:
        print(f"Modified by {revision.modified_by.email}")</doc>
<shortdoc>Retrieves the history of a cell in a row of the current sheet.</shortdoc>
</kw>
<kw name="Get Current User" lineno="1444">
<arguments repr="">
</arguments>
<doc>Gets the current authenticated user, which is also set in
the library's memory as the current user. Call this again
if you switch user or begin to impersonate a user.</doc>
<shortdoc>Gets the current authenticated user, which is also set in the library's memory as the current user. Call this again if you switch user or begin to impersonate a user.</shortdoc>
</kw>
<kw name="Get Row" lineno="1023">
<arguments repr="row: int | Row, include: str | List[Any] | None = None, exclude: str | List[Any] | None = None, native: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int | Row">
<name>row</name>
<type typedoc="integer">int</type>
<type>Row</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="include: str | List[Any] | None = None">
<name>include</name>
<type typedoc="string">str</type>
<type typedoc="list">List[Any]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="exclude: str | List[Any] | None = None">
<name>exclude</name>
<type typedoc="string">str</type>
<type typedoc="list">List[Any]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="native: bool = False">
<name>native</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Returns a single row from the current sheet.

You can provide the row as a native ``Row`` object or as an
integer representing the row ID.</doc>
<shortdoc>Returns a single row from the current sheet.</shortdoc>
</kw>
<kw name="Get Sheet" lineno="422">
<arguments repr="sheet_id: int | None = None, sheet_name: str | None = None, include: str | List[Any] | None = None, row_ids: str | List[Any] | None = None, row_numbers: str | List[Any] | None = None, column_ids: str | List[Any] | None = None, filter_id: int | None = None, native: bool = False, download_path: Path | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheet_id: int | None = None">
<name>sheet_id</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheet_name: str | None = None">
<name>sheet_name</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="include: str | List[Any] | None = None">
<name>include</name>
<type typedoc="string">str</type>
<type typedoc="list">List[Any]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="row_ids: str | List[Any] | None = None">
<name>row_ids</name>
<type typedoc="string">str</type>
<type typedoc="list">List[Any]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="row_numbers: str | List[Any] | None = None">
<name>row_numbers</name>
<type typedoc="string">str</type>
<type typedoc="list">List[Any]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="column_ids: str | List[Any] | None = None">
<name>column_ids</name>
<type typedoc="string">str</type>
<type typedoc="list">List[Any]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filter_id: int | None = None">
<name>filter_id</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="native: bool = False">
<name>native</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="download_path: Path | str | None = None">
<name>download_path</name>
<type>Path</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Retrieves a sheet from Smartsheet. This keyword also sets
the currently selected sheet to the returned sheet.

You cannot provide both a ``sheet_id`` and ``sheet_name``.

:param sheet_id: The ID of the sheet to get. You cannot supply
 both a ``sheet_id`` and ``sheet_name``.
:param sheet_name: The name of the sheet to get, it will return
 the first sheet name matching the provided name. You cannot supply
 both a ``sheet_id`` and ``sheet_name``.
:param include: Additional metadata which can be retrieved with
 the table. The list can only contain the following items:
 ``attachments``, ``attachmentFiles``, ``discussions``,
 ``rowPermalink``, or ``ALL``. Note that ``attachmentFiles``
 will only download files if you do not set ``native`` to
 ``True``.
:param row_ids: A list of row IDs to include. All other rows
 will be ignored. The list can be a list object or a
 comma-separated list as a string.
:param row_numbers: A list of row numbers to include. All other
 rows will be ignored. The list can be a list object or a
 comma-separated list as a string.
:param column_ids: A list of column IDs to only include, others
 will not be returned. The list can be a list object or a
 comma-separated list as a string.
:param filter_id: The ID of a filter to apply. Filtered out
 rows will not be included in the resulting table.
:param native: Defaults to ``False``. Set to ``True`` to change
 the return type to the native Smartsheet data model. The native
 type is useful for passing to other keywords as arguments.
:param download_path: Defaults to ``None``. Can be set when
 ``attachmentFiles`` is included in the ``include`` parameter.
 All attachments will be downloaded to the provided directory.

Example:

.. code-block:: robotframework

    ${sheet}=  Get Sheet  sheet_name=My Sheet
    FOR  ${row}  IN  &amp;{sheet}
        FOR  ${column}  ${value}  IN  &amp;{row}
            Log  The column ${column} has the value ${value}
        END
    END

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    sheet = ss.get_sheet(sheet_name="My Sheet", native=True)
    for row in sheet:
        for cell in row:
            print(f"The column {cell.column_id} has the value {cell.value}")</doc>
<shortdoc>Retrieves a sheet from Smartsheet. This keyword also sets the currently selected sheet to the returned sheet.</shortdoc>
</kw>
<kw name="Get Sheet Owner" lineno="583">
<arguments repr="sheet_id: int | None = None, sheet_name: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheet_id: int | None = None">
<name>sheet_id</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheet_name: str | None = None">
<name>sheet_name</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Returns the owner's username and ID for the current sheet.</doc>
<shortdoc>Returns the owner's username and ID for the current sheet.</shortdoc>
</kw>
<kw name="List Attachments" lineno="1344">
<arguments repr="">
</arguments>
<doc>Gets a list of all attachments from the currently selected sheet.

This will include attachments to the sheet, rows, and discussions.

Examples:

*Robot Framework:*

.. code-block:: robotframework

    ${attachments}=  List Attachments
    FOR  ${attachment} IN  @{attachments}
        Log  ${attachment.name}
    END

*Python:*

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    attachments = ss.list_attachments()
    for attachment in attachments:
        print(attachment.name)</doc>
<shortdoc>Gets a list of all attachments from the currently selected sheet.</shortdoc>
</kw>
<kw name="List Columns" lineno="802">
<arguments repr="sheet_id: int | None = None, sheet_name: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheet_id: int | None = None">
<name>sheet_id</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheet_name: str | None = None">
<name>sheet_name</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Returns a list of columns for the current sheet.

:param sheet_id: The ID of the sheet to get columns from.
:param sheet_name: The name of the sheet to get columns from.</doc>
<shortdoc>Returns a list of columns for the current sheet.</shortdoc>
</kw>
<kw name="List Sheet Filters" lineno="592">
<arguments repr="sheet_id: int | None = None, sheet_name: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheet_id: int | None = None">
<name>sheet_id</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheet_name: str | None = None">
<name>sheet_name</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Returns a list of available filters for the current sheet. You
can specify a different sheet via the ``sheet_id`` or
``sheet_name`` parameters.

The returned list of filters can be used with the ``filter_id``
argument of the ``get_sheet`` keyword.

Example:

.. code-block:: robotframework

    ${filters}=  List Sheet Filters
    FOR  ${filter}  IN  @{filters}
        ${filtered_sheet}=  Get Sheet
        ...  sheet_name=My sheet
        ...  filter_id=${filter.id}
        Log  There are ${len(filtered_sheet)} rows in the filtered sheet
    END

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    my_sheet_id = 123456789
    filters = ss.list_sheet_filters()
    for filter in filters:
        filtered_sheet = ss.get_sheet(
            sheet_id=my_sheet_id,
            filter_id=filter.id,
            native=True,
        )
        print(
            f"There are {len(filtered_sheet.rows)} rows in the "
            f"filtered sheet"
        )</doc>
<shortdoc>Returns a list of available filters for the current sheet. You can specify a different sheet via the ``sheet_id`` or ``sheet_name`` parameters.</shortdoc>
</kw>
<kw name="List Sheets" lineno="384">
<arguments repr="use_cache: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_cache: bool = True">
<name>use_cache</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Lists all sheets available for the authenticated account. Uses
cached lists if available unless ``use_cache`` is set to ``False``.

The cached lists is used for other keywords, so if you need to
refresh the cache for other keywords to use, you must do so
via this keyword.

:param use_cache: Defaults to ``True``. You can set to ``False``
 to force a reload of the cached list of sheets.

Example:

.. code-block:: robotframework

    ${sheets}=  List Sheets
    FOR  ${sheet}  IN  @{sheets}
        Log  ${sheet.name}

.. code-block:: python

    ss = SmartsheetLibrary(account_token=account_token)
    sheets = ss.list_sheets()
    for sheet in sheets:
        print(sheet.name)</doc>
<shortdoc>Lists all sheets available for the authenticated account. Uses cached lists if available unless ``use_cache`` is set to ``False``.</shortdoc>
</kw>
<kw name="Refresh Sheet" lineno="569">
<arguments repr="native: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="native: bool = False">
<name>native</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Refreshes the current sheet from the API and returns it
either as a Table or native data model depending on the
``native`` argument.</doc>
<shortdoc>Refreshes the current sheet from the API and returns it either as a Table or native data model depending on the ``native`` argument.</shortdoc>
</kw>
<kw name="Search" lineno="684">
<arguments repr="query: str, location: str | None = None, modified_since: int | str | None = None, include: str | List[Any] | None = None, scopes: str | List[Any] | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="query: str">
<name>query</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="location: str | None = None">
<name>location</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modified_since: int | str | None = None">
<name>modified_since</name>
<type typedoc="integer">int</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="include: str | List[Any] | None = None">
<name>include</name>
<type typedoc="string">str</type>
<type typedoc="list">List[Any]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="scopes: str | List[Any] | None = None">
<name>scopes</name>
<type typedoc="string">str</type>
<type typedoc="list">List[Any]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Searches for all sheets for text matching the query. Returns
a list of native Smartsheet Sheet objects. You can use the
additional parameters to filter the search and increase speed.

:param query: The text to search for.
:param location: The location to search. When specified with
 a value of ``personalWorkspace``, the search will be limited
 to the current user's personal workspace.
:param modified_since: The date to search from. This can be
 either a string or an integer. If an integer is provided, it
 will be interpreted as a Unix timestamp. If a string is
 provided, it will be parsed via the Robot Framework time
 utilities, so you can provided it using keywords like
 ``NOW - 1 day``.
:param include: When specified with the value of ``favoriteFlag``,
 results will either include a ``favorite`` attribute or
 ``parentObjectFavorite`` attribute depending on the type of
 object found by the search engine.
:param scopes: If search fails, try using an array for each type
 of this comma-separated list of search filters. The following
 strings can be used to filter the search results:

    * ``attachments``: Search in attachments.
    * ``cellData``: Search in cell data.
    * ``comments``: Search in comments.
    * ``folderNames``: Search in folder names.
    * ``reportNames``: Search in report names.
    * ``sheetNames``: Search in sheet names.
    * ``sightNames``: Search in sight names.
    * ``summaryFields``: Search in summary fields.
    * ``templateNames``: Search in template names.
    * ``workspaceNames``: Search in workspace names.


Example:

.. code-block:: robotframework

    ${sheets}=  Search  my search query
    FOR  ${sheet}  IN  @{sheets}
        Log  ${sheet.name}

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    sheets = ss.search("my search query")
    for sheet in sheets:
        print(sheet.name)</doc>
<shortdoc>Searches for all sheets for text matching the query. Returns a list of native Smartsheet Sheet objects. You can use the additional parameters to filter the search and increase speed.</shortdoc>
</kw>
<kw name="Set Access Token" lineno="229">
<arguments repr="access_token: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="access_token: str">
<name>access_token</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Sets the access token to be used when accessing the
Smartsheet API.

Learn more about authenticating to Smartsheets
`here &lt;https://smartsheet.redoc.ly/#section/API-Basics/Raw-Token-Requests&gt;`_.

:param access_token: The access token created for your
 Smartsheet user.

Example:

.. code-block:: robotframework

    Set Access Token  ${access_token}

.. code-block:: python

    smartsheet = Smartsheet(access_token=access_token)
    # or
    smartsheet.set_access_token(access_token)</doc>
<shortdoc>Sets the access token to be used when accessing the Smartsheet API.</shortdoc>
</kw>
<kw name="Set Max Retry Time" lineno="254">
<arguments repr="max_retry_time: str | int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="max_retry_time: str | int">
<name>max_retry_time</name>
<type typedoc="string">str</type>
<type typedoc="integer">int</type>
</arg>
</arguments>
<doc>Sets the max retry time to use when sending requests to the
Smartsheet API. Returns the current max retry time.

:param max_retry_time: Maximum time to allow retries of API
 calls. Can be provided as a time string or int.</doc>
<shortdoc>Sets the max retry time to use when sending requests to the Smartsheet API. Returns the current max retry time.</shortdoc>
</kw>
<kw name="Set Row" lineno="1140">
<arguments repr="row: int | Row, data: Dict | List[Dict] | Row | None = None, native: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int | Row">
<name>row</name>
<type typedoc="integer">int</type>
<type>Row</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="data: Dict | List[Dict] | Row | None = None">
<name>data</name>
<type typedoc="dictionary">Dict</type>
<type typedoc="list">List[Dict]</type>
<type>Row</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="native: bool = False">
<name>native</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Updates a single row of the current sheet with the provided data.

You can provide the row as a native ``Row`` object or as an
integer representing the row ID. You may omit the ``data``
argument if you are providing a native ``Row`` object.

You can provide the data in several ways:

* As a dictionary: the keys of the dictionary are the
  column IDs or Titles and the values are the values for the
  cells.
* As a list of dictionaries: each dictionary is a cell. The keys
  of the dictionary should match cell attributes, e.g., ``column_id``,
  ``title``, ``value``, etc. See the `smartsheet API docs`_ for more
  information. The dictionary keys must be provided in snake case.
  You must use this method to set formulas on the row.
* As a native ``Row`` object: a native object from the API with
  new values for the cells.

.. _smartsheet API docs: https://smartsheet.redoc.ly/tag/rows#operation/update-rows

For examples, see ``Set Rows``.</doc>
<shortdoc>Updates a single row of the current sheet with the provided data.</shortdoc>
</kw>
<kw name="Set Rows" lineno="1048">
<arguments repr="data: List | Table, native: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="data: List | Table">
<name>data</name>
<type typedoc="list">List</type>
<type>Table</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="native: bool = False">
<name>native</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Updates rows of the current sheet with the provided data.

.. note::
   In order to update rows, you must identify the rows to the
   API. You can do this by providing the ``rowId`` or ``rowNumber``
   as a column in the data. The ID must be the API ID, while the
   number is the row number per the UI. This can only be excluded
   if the length of the data matches the length of the sheet.

You can provide the data in several ways:

* As a list of dictionaries: each list item represents a row
  as a single dictionary. The keys of the dictionary are the
  column IDs or Titles and the values are the values for the
  cells.
* As a list of lists of dictionaries: each sub list item is
  a row and each dictionary is a cell. The keys of the dictionary
  should match cell attributes, e.g., ``column_id``, ``title``,
  ``value``, etc. See the `smartsheet API docs`_ for more
  information. The dictionary keys must be provided in snake
  case. You must use this method to set formulas on the row.
* As a list of native ``Row`` objects: each ``Row`` object is a
  native object from the API with new values for the cells.
* As a ``Table`` object: the columns of the Table must either
  be the column IDs or Titles.

.. _smartsheet API docs: https://smartsheet.redoc.ly/tag/rows#operation/update-rows

Examples:

*Robot Framework:*

.. code-block:: robotframework

    ${row1}=  Create Dictionary  rowId=123  column1=value1  column2=value2
    ${row2}=  Create Dictionary  rowId=456  column1=value3  column2=value4
    ${row3}=  Create Dictionary  rowId=789  column1=value5  column2=value6
    ${data} =  Create List  ${row1}  ${row2}  ${row3}
    Set Rows  ${data}

    # Or work with native row objects to update them.
    ${row1}=  Get Row  123
    FOR  ${cell}  IN  @{row1.cells}
        IF  ${cell.column_id} == 123
            ${cell.value}=  Set Variable  New Value
        END
    END
    ${data}=  Create List  ${row1}
    Set Rows  ${data}

*Python:*

.. code-block:: python

    ss = Smartsheet(access_token=access_token)
    row1 = {"rowId": 123, "column1": "value1", "column2": "value2"}
    row2 = {"rowId": 456, "column1": "value3", "column2": "value4"}
    row3 = {"rowId": 789, "column1": "value5", "column2": "value6"}
    data = [row1, row2, row3]
    ss.set_rows(data)

    # or work with native row objects to update them.
    row1 = ss.get_row(123)
    for cell in row1.cells:
        if cell.column_id == 123:
            cell.value = "New Value"
    data = [row1]
    ss.set_rows(data)</doc>
<shortdoc>Updates rows of the current sheet with the provided data.</shortdoc>
</kw>
<kw name="Unselect Current Sheet" lineno="416">
<arguments repr="">
</arguments>
<doc>Resets the current sheet to `None`.</doc>
<shortdoc>Resets the current sheet to `None`.</shortdoc>
</kw>
<kw name="Update Column" lineno="924">
<arguments repr="column: int | str | Column, **kwargs">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int | str | Column">
<name>column</name>
<type typedoc="integer">int</type>
<type typedoc="string">str</type>
<type>Column</type>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>Updates a column in the current sheet. See the ``Add Column`` keyword
for a list of supported attributes.

:param column: Column ID or title.
:param kwargs: Column attributes to update. See ``Add Column`` keyword
 for a list of supported attributes.</doc>
<shortdoc>Updates a column in the current sheet. See the ``Add Column`` keyword for a list of supported attributes.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="boolean" type="Standard">
<doc>Strings ``TRUE``, ``YES``, ``ON`` and ``1`` are converted to Boolean ``True``,
the empty string as well as strings ``FALSE``, ``NO``, ``OFF`` and ``0``
are converted to Boolean ``False``, and the string ``NONE`` is converted
to the Python ``None`` object. Other strings and other accepted values are
passed as-is, allowing keywords to handle them specially if
needed. All string comparisons are case-insensitive.

Examples: ``TRUE`` (converted to ``True``), ``off`` (converted to ``False``),
``example`` (used as-is)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>Add Column</usage>
<usage>Add Rows</usage>
<usage>Get Row</usage>
<usage>Get Sheet</usage>
<usage>List Sheets</usage>
<usage>Refresh Sheet</usage>
<usage>Set Row</usage>
<usage>Set Rows</usage>
</usages>
</type>
<type name="dictionary" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#dict|dictionary]
literals. They are converted to actual dictionaries using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
dictionaries and other containers.

Examples: ``{'a': 1, 'b': 2}``, ``{'key': 1, 'nested': {'key': 2}}``
</doc>
<accepts>
<type>string</type>
<type>Mapping</type>
</accepts>
<usages>
<usage>Download Attachment</usage>
<usage>Set Row</usage>
</usages>
</type>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Add Column</usage>
<usage>Create Sheet</usage>
<usage>Download Attachment</usage>
<usage>Get Cell History</usage>
<usage>Get Row</usage>
<usage>Get Sheet</usage>
<usage>Get Sheet Owner</usage>
<usage>List Columns</usage>
<usage>List Sheet Filters</usage>
<usage>Search</usage>
<usage>Set Max Retry Time</usage>
<usage>Set Row</usage>
<usage>Update Column</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Add Column</usage>
<usage>Add Columns</usage>
<usage>Add Rows</usage>
<usage>Create Sheet</usage>
<usage>Get Row</usage>
<usage>Get Sheet</usage>
<usage>Search</usage>
<usage>Set Row</usage>
<usage>Set Rows</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Add Column</usage>
<usage>Add Columns</usage>
<usage>Convert Sheet To Table</usage>
<usage>Create Sheet</usage>
<usage>Download Attachment</usage>
<usage>Get Row</usage>
<usage>Get Sheet</usage>
<usage>Get Sheet Owner</usage>
<usage>List Columns</usage>
<usage>List Sheet Filters</usage>
<usage>Search</usage>
<usage>Set Row</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Add Column</usage>
<usage>Create Sheet</usage>
<usage>Download Attachment</usage>
<usage>Get Cell History</usage>
<usage>Get Row</usage>
<usage>Get Sheet</usage>
<usage>Get Sheet Owner</usage>
<usage>List Columns</usage>
<usage>List Sheet Filters</usage>
<usage>Search</usage>
<usage>Set Access Token</usage>
<usage>Set Max Retry Time</usage>
<usage>Update Column</usage>
</usages>
</type>
</typedocs>
</keywordspec>
