<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.SAP" type="LIBRARY" format="ROBOT" scope="GLOBAL" generated="2023-05-05T11:54:26Z" specversion="4" source="./RPA/SAP.py" lineno="26">
<version>1.1</version>
<doc>This library wraps the upstream [https://frankvanderkuur.github.io/SapGuiLibrary.html|SapGuiLibrary].

The SapGuiLibrary is a library that enables users to create tests for the Sap Gui application

    The library uses the Sap Scripting Engine, therefore Scripting must be enabled in Sap in order for this library to work.

    = Opening a connection / Before running tests =

    First of all, you have to *make sure the Sap Logon Pad is started*. You can automate this process by using the
    AutoIT library or the Process Library.

    After the Sap Login Pad is started, you can connect to the Sap Session using the keyword `connect to session`.

    If you have a successful connection you can use `Open Connection` to open a new connection from the Sap Logon Pad
    or `Connect To Existing Connection` to connect to a connection that is already open.

    = Locating or specifying elements =

    You need to specify elements starting from the window ID, for example, wnd[0]/tbar[1]/btn[8]. In some cases the SAP
    ID contains backslashes. Make sure you escape these backslashes by adding another backslash in front of it.

    = Screenshots (on error) =

    The SapGUILibrary offers an option for automatic screenshots on error.
    Default this option is enabled, use keyword `disable screenshots on error` to skip the screenshot functionality.
    Alternatively, this option can be set at import.
    </doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="35">
<arguments repr="*args, **kwargs">
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>Sets default variables for the library</doc>
<shortdoc>Sets default variables for the library</shortdoc>
</init>
</inits>
<keywords>
<kw name="Click Element" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="56">
<arguments repr="element_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
</arguments>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.

In case you want to change a value of an element like checkboxes of selecting an option in dropdown lists,
use `select checkbox` or `select from list by label` instead.</doc>
<shortdoc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</shortdoc>
</kw>
<kw name="Click Toolbar Button" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="76">
<arguments repr="table_id, button_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="table_id">
<name>table_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="button_id">
<name>button_id</name>
</arg>
</arguments>
<doc>Clicks a button of a toolbar within a GridView 'table_id' which is contained within a shell object.
Use the Scripting tracker recorder to find the 'button_id' of the button to click</doc>
<shortdoc>Clicks a button of a toolbar within a GridView 'table_id' which is contained within a shell object. Use the Scripting tracker recorder to find the 'button_id' of the button to click</shortdoc>
</kw>
<kw name="Connect To Existing Connection" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="93">
<arguments repr="connection_name">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="connection_name">
<name>connection_name</name>
</arg>
</arguments>
<doc>Connects to an open connection. If the connection matches the given connection_name, the session is connected
to this connection.</doc>
<shortdoc>Connects to an open connection. If the connection matches the given connection_name, the session is connected to this connection.</shortdoc>
</kw>
<kw name="Connect To Session" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="105">
<arguments repr="explicit_wait=0">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="explicit_wait=0">
<name>explicit_wait</name>
<default>0</default>
</arg>
</arguments>
<doc>Connects to an open session SAP.

See `Opening a connection / Before running tests` for details about requirements before connecting to a session.

Optionally `set explicit wait` can be used to set the explicit wait time.

*Examples*:
| *Keyword*             | *Attributes*          |
| connect to session    |                       |
| connect to session    | 3                     |
| connect to session    | explicit_wait=500ms   |</doc>
<shortdoc>Connects to an open session SAP.</shortdoc>
</kw>
<kw name="Disable Screenshots On Error" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="143">
<arguments repr="">
</arguments>
<doc>Disables automatic screenshots on error.</doc>
<shortdoc>Disables automatic screenshots on error.</shortdoc>
</kw>
<kw name="Doubleclick Element" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="148">
<arguments repr="element_id, item_id, column_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="item_id">
<name>item_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column_id">
<name>column_id</name>
</arg>
</arguments>
<doc>Performs a double-click on a given element. Used only for shell objects.</doc>
<shortdoc>Performs a double-click on a given element. Used only for shell objects.</shortdoc>
</kw>
<kw name="Element Should Be Present" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="162">
<arguments repr="element_id, message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message=None">
<name>message</name>
<default>None</default>
</arg>
</arguments>
<doc>Checks whether an element is present on the screen.</doc>
<shortdoc>Checks whether an element is present on the screen.</shortdoc>
</kw>
<kw name="Element Value Should Be" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="173">
<arguments repr="element_id, expected_value, message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected_value">
<name>expected_value</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message=None">
<name>message</name>
<default>None</default>
</arg>
</arguments>
<doc>Checks whether the element value is the same as the expected value.
The possible expected values depend on the type of element (see usage).

 Usage:
 | *Element type*   | *possible values*                 |
 | textfield        | text                              |
 | label            | text                              |
 | checkbox         | checked / unchecked               |
 | radiobutton      | checked / unchecked               |
 | combobox         | text of the option to be expected |</doc>
<shortdoc>Checks whether the element value is the same as the expected value. The possible expected values depend on the type of element (see usage).</shortdoc>
</kw>
<kw name="Element Value Should Contain" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="235">
<arguments repr="element_id, expected_value, message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected_value">
<name>expected_value</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message=None">
<name>message</name>
<default>None</default>
</arg>
</arguments>
<doc>Checks whether the element value contains the expected value.
The possible expected values depend on the type of element (see usage).

 Usage:
 | *Element type*   | *possible values*                 |
 | textfield        | text                              |
 | label            | text                              |
 | combobox         | text of the option to be expected |</doc>
<shortdoc>Checks whether the element value contains the expected value. The possible expected values depend on the type of element (see usage).</shortdoc>
</kw>
<kw name="Enable Screenshots On Error" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="270">
<arguments repr="">
</arguments>
<doc>Enables automatic screenshots on error.</doc>
<shortdoc>Enables automatic screenshots on error.</shortdoc>
</kw>
<kw name="Focus And Click" lineno="58">
<arguments repr="element_id: str, wait_time: float | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id: str">
<name>element_id</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="wait_time: float | None = None">
<name>wait_time</name>
<type typedoc="float">float</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Set focus into the element and click it.

Note. The default library wait time can be adjusted using `Set Explicit Wait`
keyword. Library's `explicit_wait` will be used if `wait_time` parameter
is not set.

:param element_id: locator for the element
:param wait_time: the wait time after the action</doc>
<shortdoc>Set focus into the element and click it.</shortdoc>
</kw>
<kw name="Focus And Input Text" lineno="74">
<arguments repr="element_id: str, text: str, wait_time: float | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id: str">
<name>element_id</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="wait_time: float | None = None">
<name>wait_time</name>
<type typedoc="float">float</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Set focus into the element and input text into it.

Note. The default library wait time can be adjusted using `Set Explicit Wait`
keyword. Library's `explicit_wait` will be used if `wait_time` parameter
is not set.

:param element_id: locator for the element
:param text: text to be inputted
:param wait_time: the wait time after the action</doc>
<shortdoc>Set focus into the element and input text into it.</shortdoc>
</kw>
<kw name="Generic Click Element" lineno="149">
<arguments repr="element_id, click_type=press">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="click_type=press">
<name>click_type</name>
<default>press</default>
</arg>
</arguments>
<doc>Performs a single click on a given element.

Differs from `Click Element` keyword so that element type is ignored, instead
`click_type` (either `press` or `select`) is performed on the element if
possible.

In case you want to change a value of an element like checkboxes of selecting
an option in dropdown lists, use `select checkbox` or
`select from list by label` instead.

:param element_id: locator for the element
:param click_type: either ``press`` (default) or ``select``</doc>
<shortdoc>Performs a single click on a given element.</shortdoc>
</kw>
<kw name="Generic Input Password" lineno="93">
<arguments repr="element_id, password">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="password">
<name>password</name>
</arg>
</arguments>
<doc>Inserts the given password into the text field identified by locator.

This keyword does NOT depend on the type of the element. Will set
password to the element's 'text' attribute if possible.

The password is not recorded in the log.

:param element_id: locator for the element
:param password: password to be inputted</doc>
<shortdoc>Inserts the given password into the text field identified by locator.</shortdoc>
</kw>
<kw name="Generic Input Text" lineno="106">
<arguments repr="element_id, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.

This keyword does NOT depend on the type of the element. Will set
text to the element's 'text' attribute if possible.

:param element_id: locator for the element
:param text: text to be inputted</doc>
<shortdoc>Inserts the given text into the text field identified by locator. Use keyword `input password` to insert a password in a text field.</shortdoc>
</kw>
<kw name="Get Cell Value" lineno="178">
<arguments repr="table_id, row_num, col_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="table_id">
<name>table_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row_num">
<name>row_num</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="col_id">
<name>col_id</name>
</arg>
</arguments>
<doc>Returns the cell value for the specified cell.

:param table_id: locator for the table element
:param row_num: table row number
:param col_id: table cell id
:return: text in the specified cell</doc>
<shortdoc>Returns the cell value for the specified cell.</shortdoc>
</kw>
<kw name="Get Element Location" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="288">
<arguments repr="element_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
</arguments>
<doc>Returns the Sap element location for the given element.</doc>
<shortdoc>Returns the Sap element location for the given element.</shortdoc>
</kw>
<kw name="Get Element Type" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="296">
<arguments repr="element_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
</arguments>
<doc>Returns the Sap element type for the given element.</doc>
<shortdoc>Returns the Sap element type for the given element.</shortdoc>
</kw>
<kw name="Get Element Type Of Object" lineno="118">
<arguments repr="element">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element">
<name>element</name>
</arg>
</arguments>
<doc>Returns the Sap element type for the given element.

:param element: SAP element
:return: type of the SAP element</doc>
<shortdoc>Returns the Sap element type for the given element.</shortdoc>
</kw>
<kw name="Get Row Count" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="307">
<arguments repr="table_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="table_id">
<name>table_id</name>
</arg>
</arguments>
<doc>Returns the number of rows found in the specified table.</doc>
<shortdoc>Returns the number of rows found in the specified table.</shortdoc>
</kw>
<kw name="Get Scroll Position" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="314">
<arguments repr="element_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
</arguments>
<doc>Returns the scroll position of the scrollbar of an element 'element_id' that is contained within a shell object.</doc>
<shortdoc>Returns the scroll position of the scrollbar of an element 'element_id' that is contained within a shell object.</shortdoc>
</kw>
<kw name="Get Statusbar Type" lineno="42">
<arguments repr="window: str | None = wnd[0]">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="window: str | None = wnd[0]">
<name>window</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>wnd[0]</default>
</arg>
</arguments>
<doc>Retrieves the messageType in the statusbar the given window.

Takes screenshot on error.

:param window: locator for the statusbar, default 'wnd[0]'
:return: messageType of the /sbar element or empty string</doc>
<shortdoc>Retrieves the messageType in the statusbar the given window.</shortdoc>
</kw>
<kw name="Get Value" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="321">
<arguments repr="element_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
</arguments>
<doc>Gets the value of the given element. The possible return values depend on the type of element (see Return values).

Return values:
| *Element type*   | *Return values*                   |
| textfield        | text                              |
| label            | text                              |
| checkbox         | checked / unchecked               |
| radiobutton      | checked / unchecked               |
| combobox         | text of the selected option       |
| guibutton        | text                              |
| guititlebar      | text                              |
| guistatusbar     | text                              |
| guitab           | text                              |</doc>
<shortdoc>Gets the value of the given element. The possible return values depend on the type of element (see Return values).</shortdoc>
</kw>
<kw name="Get Window Title" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="369">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Retrieves the window title of the given window.</doc>
<shortdoc>Retrieves the window title of the given window.</shortdoc>
</kw>
<kw name="Input Password" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="382">
<arguments repr="element_id, password">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="password">
<name>password</name>
</arg>
</arguments>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<shortdoc>Inserts the given password into the text field identified by locator. The password is not recorded in the log.</shortdoc>
</kw>
<kw name="Input Text" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="399">
<arguments repr="element_id, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<shortdoc>Inserts the given text into the text field identified by locator. Use keyword `input password` to insert a password in a text field.</shortdoc>
</kw>
<kw name="Maximize Window" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="416">
<arguments repr="window=0">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="window=0">
<name>window</name>
<default>0</default>
</arg>
</arguments>
<doc>Maximizes the SapGui window.</doc>
<shortdoc>Maximizes the SapGui window.</shortdoc>
</kw>
<kw name="Open Connection" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="430">
<arguments repr="connection_name">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="connection_name">
<name>connection_name</name>
</arg>
</arguments>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<shortdoc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</shortdoc>
</kw>
<kw name="Run Transaction" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="449">
<arguments repr="transaction">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="transaction">
<name>transaction</name>
</arg>
</arguments>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<shortdoc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</shortdoc>
</kw>
<kw name="Scroll" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="467">
<arguments repr="element_id, position">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="position">
<name>position</name>
</arg>
</arguments>
<doc>Scrolls the scrollbar of an element 'element_id' that is contained within a shell object.
'Position' is the number of rows to scroll.</doc>
<shortdoc>Scrolls the scrollbar of an element 'element_id' that is contained within a shell object. 'Position' is the number of rows to scroll.</shortdoc>
</kw>
<kw name="Select Checkbox" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="475">
<arguments repr="element_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
</arguments>
<doc>Selects checkbox identified by locator.
Does nothing if the checkbox is already selected.</doc>
<shortdoc>Selects checkbox identified by locator. Does nothing if the checkbox is already selected.</shortdoc>
</kw>
<kw name="Select Context Menu Item" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="488">
<arguments repr="element_id, menu_or_button_id, item_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menu_or_button_id">
<name>menu_or_button_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="item_id">
<name>item_id</name>
</arg>
</arguments>
<doc>Selects an item from the context menu by clicking a button or right-clicking in the node context menu.</doc>
<shortdoc>Selects an item from the context menu by clicking a button or right-clicking in the node context menu.</shortdoc>
</kw>
<kw name="Select From List By Label" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="507">
<arguments repr="element_id, value">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value">
<name>value</name>
</arg>
</arguments>
<doc>Selects the specified option from the selection list.</doc>
<shortdoc>Selects the specified option from the selection list.</shortdoc>
</kw>
<kw name="Select Node" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="519">
<arguments repr="tree_id, node_id, expand=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="tree_id">
<name>tree_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="node_id">
<name>node_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="expand=False">
<name>expand</name>
<default>False</default>
</arg>
</arguments>
<doc>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.

Use the Scripting tracker recorder to find the 'node_id' of the node.
Expand can be set to True to expand the node. If the node cannot be expanded, no error is given.</doc>
<shortdoc>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.</shortdoc>
</kw>
<kw name="Select Node Link" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="535">
<arguments repr="tree_id, link_id1, link_id2">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="tree_id">
<name>tree_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="link_id1">
<name>link_id1</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="link_id2">
<name>link_id2</name>
</arg>
</arguments>
<doc>Selects a link of a TableTreeControl 'tree_id' which is contained within a shell object.

Use the Scripting tracker recorder to find the 'link_id1' and 'link_id2' of the link to select.</doc>
<shortdoc>Selects a link of a TableTreeControl 'tree_id' which is contained within a shell object.</shortdoc>
</kw>
<kw name="Select Radio Button" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="545">
<arguments repr="element_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
</arguments>
<doc>Sets radio button to the specified value.</doc>
<shortdoc>Sets radio button to the specified value.</shortdoc>
</kw>
<kw name="Select Table Column" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="557">
<arguments repr="table_id, column_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="table_id">
<name>table_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column_id">
<name>column_id</name>
</arg>
</arguments>
<doc>Selects an entire column of a GridView 'table_id' which is contained within a shell object.

Use the Scripting tracker recorder to find the 'column_id' of the column to select.</doc>
<shortdoc>Selects an entire column of a GridView 'table_id' which is contained within a shell object.</shortdoc>
</kw>
<kw name="Select Table Row" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="571">
<arguments repr="table_id, row_num">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="table_id">
<name>table_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row_num">
<name>row_num</name>
</arg>
</arguments>
<doc>Selects an entire row of a table. This can either be a TableControl or a GridView 'table_id'
which is contained within a shell object. The row is an index to select the row, starting from 0.</doc>
<shortdoc>Selects an entire row of a table. This can either be a TableControl or a GridView 'table_id' which is contained within a shell object. The row is an index to select the row, starting from 0.</shortdoc>
</kw>
<kw name="Send Vkey" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="588">
<arguments repr="vkey_id, window=0">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="vkey_id">
<name>vkey_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="window=0">
<name>window</name>
<default>0</default>
</arg>
</arguments>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.

To send a vkey, you can either use te *VKey ID* or the *Key combination*.

Sap Virtual Keys (on Windows)
| *VKey ID* | *Key combination*     | *VKey ID* | *Key combination*     | *VKey ID* | *Key combination*     |
| *0*       | Enter                 | *26*      | Ctrl + F2             | *72*      | Ctrl + A              |
| *1*       | F1                    | *27*      | Ctrl + F3             | *73*      | Ctrl + D              |
| *2*       | F2                    | *28*      | Ctrl + F4             | *74*      | Ctrl + N              |
| *3*       | F3                    | *29*      | Ctrl + F5             | *75*      | Ctrl + O              |
| *4*       | F4                    | *30*      | Ctrl + F6             | *76*      | Shift + Del           |
| *5*       | F5                    | *31*      | Ctrl + F7             | *77*      | Ctrl + Ins            |
| *6*       | F6                    | *32*      | Ctrl + F8             | *78*      | Shift + Ins           |
| *7*       | F7                    | *33*      | Ctrl + F9             | *79*      | Alt + Backspace       |
| *8*       | F8                    | *34*      | Ctrl + F10            | *80*      | Ctrl + Page Up        |
| *9*       | F9                    | *35*      | Ctrl + F11            | *81*      | Page Up               |
| *10*      | F10                   | *36*      | Ctrl + F12            | *82*      | Page Down             |
| *11*      | F11 or Ctrl + S       | *37*      | Ctrl + Shift + F1     | *83*      | Ctrl + Page Down      |
| *12*      | F12 or ESC            | *38*      | Ctrl + Shift + F2     | *84*      | Ctrl + G              |
| *14*      | Shift + F2            | *39*      | Ctrl + Shift + F3     | *85*      | Ctrl + R              |
| *15*      | Shift + F3            | *40*      | Ctrl + Shift + F4     | *86*      | Ctrl + P              |
| *16*      | Shift + F4            | *41*      | Ctrl + Shift + F5     | *87*      | Ctrl + B              |
| *17*      | Shift + F5            | *42*      | Ctrl + Shift + F6     | *88*      | Ctrl + K              |
| *18*      | Shift + F6            | *43*      | Ctrl + Shift + F7     | *89*      | Ctrl + T              |
| *19*      | Shift + F7            | *44*      | Ctrl + Shift + F8     | *90*      | Ctrl + Y              |
| *20*      | Shift + F8            | *45*      | Ctrl + Shift + F9     | *91*      | Ctrl + X              |
| *21*      | Shift + F9            | *46*      | Ctrl + Shift + F10    | *92*      | Ctrl + C              |
| *22*      | Ctrl + Shift + 0      | *47*      | Ctrl + Shift + F11    | *93*      | Ctrl + V              |
| *23*      | Shift + F11           | *48*      | Ctrl + Shift + F12    | *94*      | Shift + F10           |
| *24*      | Shift + F12           | *70*      | Ctrl + E              | *97*      | Ctrl + #              |
| *25*      | Ctrl + F1             | *71*      | Ctrl + F              |           |                       |

Examples:
| *Keyword*     | *Attributes*      |           |
| send_vkey     | 8                 |           |
| send_vkey     | Ctrl + Shift + F1 |           |
| send_vkey     | Ctrl + F7         | window=1  |</doc>
<shortdoc>Sends a SAP virtual key combination to the window, not into an element. If you want to send a value to a text field, use `input text` instead.</shortdoc>
</kw>
<kw name="Set Cell Value" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="669">
<arguments repr="table_id, row_num, col_id, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="table_id">
<name>table_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row_num">
<name>row_num</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="col_id">
<name>col_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Sets the cell value for the specified cell of a GridView 'table_id' which is contained within a shell object.

Use the Scripting tracker recorder to find the 'col_id' of the cell to set.</doc>
<shortdoc>Sets the cell value for the specified cell of a GridView 'table_id' which is contained within a shell object.</shortdoc>
</kw>
<kw name="Set Explicit Wait" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="685">
<arguments repr="speed">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="speed">
<name>speed</name>
</arg>
</arguments>
<doc>Sets the delay time that is waited after each SapGui keyword.

The value can be given as a number that is considered to be seconds or as a human-readable string like 1 second
or 700 ms.

This functionality is designed to be used for demonstration and debugging purposes. It is not advised to use
this keyword to wait for an element to appear or function to finish.

 *Possible time formats:*
| miliseconds       | milliseconds, millisecond, millis, ms |
| seconds           | seconds, second, secs, sec, s         |
| minutes           | minutes, minute, mins, min, m         |

 *Example:*
| *Keyword*         | *Attributes*      |
| Set explicit wait | 1                 |
| Set explicit wait | 3 seconds         |
| Set explicit wait | 500 ms            |</doc>
<shortdoc>Sets the delay time that is waited after each SapGui keyword.</shortdoc>
</kw>
<kw name="Set Focus" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="739">
<arguments repr="element_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
</arguments>
<doc>Sets the focus to the given element.</doc>
<shortdoc>Sets the focus to the given element.</shortdoc>
</kw>
<kw name="Take Screenshot" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="748">
<arguments repr="screenshot_name=sap-screenshot">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="screenshot_name=sap-screenshot">
<name>screenshot_name</name>
<default>sap-screenshot</default>
</arg>
</arguments>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.

This keyword uses Robots' internal `Screenshot` library.</doc>
<shortdoc>Takes a screenshot, only if 'screenshots on error' has been enabled, either at import of with keyword `enable screenshots on error`.</shortdoc>
</kw>
<kw name="Unselect Checkbox" source="./SapGuiLibrary/SapGuiLibrary.py" lineno="757">
<arguments repr="element_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
</arguments>
<doc>Removes selection of checkbox identified by locator.
Does nothing if the checkbox is not selected.</doc>
<shortdoc>Removes selection of checkbox identified by locator. Does nothing if the checkbox is not selected.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="float" type="Standard">
<doc>Conversion is done using Python's
[https://docs.python.org/library/functions.html#float|float] built-in function.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``3.14``, ``2.9979e8``, ``10 000.000 01``
</doc>
<accepts>
<type>string</type>
<type>Real</type>
</accepts>
<usages>
<usage>Focus And Click</usage>
<usage>Focus And Input Text</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Focus And Click</usage>
<usage>Focus And Input Text</usage>
<usage>Get Statusbar Type</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Focus And Click</usage>
<usage>Focus And Input Text</usage>
<usage>Get Statusbar Type</usage>
</usages>
</type>
</typedocs>
</keywordspec>
